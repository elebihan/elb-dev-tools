#!/usr/bin/env bash
#
# announce-release - write release mail
#
# Copyright (C) 2017 Eric Le Bihan <eric.le.bihan.dev@free.fr>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.
#

__VERSION__=@VERSION@

RECIPIENTS_FILE=
EMITTER="${DEBFULLNAME} <${DEBEMAIL}>"
PREFIX="ANNOUNCE"

declare -A PARAMETERS

changes() {
    local path=$1
    local version=$(sed 's/^[a-z]\+-//g' <<< $2)
    local changelog="${path}/NEWS.md"

    test ! -r "${changelog}" && return 0

    cat <<EOF

Changes:

\`\`\`
$(sed "1,/^## \[${version}\].\+$/d;/^## .\+$/,\$d" ${changelog})
\`\`\`
EOF
}

signature() {
    if [ -f "${HOME}/.signature" ]; then
        echo -e "--\n$(cat ${HOME}/.signature)\n"
    fi
}

default_template() {
    local template=$(mktemp -t "$(basename "$0")-XXXXXX.mail.mustache")

    cat <<EOF > "${template}"
From: {{emitter}}
To: {{recipients}}
Subject: [{{prefix}}] {{project}} {{version}} is available
bcc: {{emitter}}

Hi!

Version {{version}} of {{project}} is available in its repository [1].

[1] {{url}}
{{text}}

Regards,

{{signature}}
EOF

    echo "${template}"
}

usage() {
    cat<<EOF
Usage: $(basename $0) [OPTIONS] <path> [<recipient>, ...]

Options:
  -h        Show this help message
  -v        Show version information
  -f EMAIL  Set emitter mail address
  -i FILE   Read recipients from FILE
  -p PREFIX Set subject prefix
  -t FILE   Set mail template
  -P K:V    Set K in template to value V
  -T FILE   Set text from FILE
EOF
}

while getopts "hvf:i:p:t:P:T:" option; do
    case ${option} in
        h)
            usage; exit 0
            ;;
        v)
            echo ${__VERSION__}; exit 0
            ;;
        f)
            EMITTER=${OPTARG}
            ;;
        i)
            RECIPIENTS_FILE=${OPTARG}
            ;;
        p)
            PREFIX=${OPTARG}
            ;;
        t)
            TEMPLATE=${OPTARG}
            ;;
        P)
            PARAMETERS[${OPTARG%%:*}]=${OPTARG##*:}
            ;;
        T)
            TEXT_FILE=${OPTARG}
            ;;

        *)
            echo "Unknown option" >&2; exit 1
            ;;
    esac
done

shift $(($OPTIND - 1))

if [ $# -lt 1 ]; then
    usage
    exit 1
fi

path=$1
shift

if [ $# -eq 0 -a -z "${RECIPIENTS_FILE}" ]; then
    echo "No recipients given" >&2
    exit 2
fi

if [ -z "${EMITTER}" ]; then
    echo "No emitter given" >&2
    exit 3
fi

for r in "$@"; do
    recipients="${r}, ${recipients}"
done

if [ -f "${RECIPIENTS_FILE}" ]; then
    while read -r r; do
        if ! grep -q -e '^#' <<< "${r}"; then
            recipients="${r}, ${recipients}"
        fi
   done < "${RECIPIENTS_FILE}"
fi

if [ -d "${path}" ]; then
    url=$(git --git-dir "${path}/.git" config --get remote.origin.url)
    version=$(git --git-dir "${path}/.git"  describe --abbrev=0 --tags)
    project=$(basename "${url%%.git}")
else
    url="${path}"
fi

if [ -n "${TEXT_FILE}" ]; then
    text=$(cat "${TEXT_FILE}")
else
    text=$(changes ${path} ${version})
fi

if [ -z "${TEMPLATE}" ]; then
    template=$(default_template)
else
    template="${TEMPLATE}"
fi

declare -A items

items['emitter']="${EMITTER}"
items['recipients']="${recipients}"
items['prefix']="${PREFIX}"
items['project']="${project}"
items['version']="${version}"
items['url']="${url}"

for key in "${!PARAMETERS[@]}"; do
    items[${key}]=${PARAMETERS[$key]}
done

declare -a sed_opts

for key in "${!items[@]}"; do
    sed_opts+=(-e "s%{{${key}}}%${items[${key}]}%g")
done

sed "${sed_opts[@]}" "${template}" \
    | awk -v text="${text}" \
          'NR=1, /{{text}}/ { sub(/{{text}}/, text) } 1' \
    | awk -v signature="$(signature)" \
          'NR=1, /{{signature}}/ { sub(/{{signature}}/, signature) } 1'


if [ -z "${TEMPLATE}" ]; then
    rm -f "${template}"
fi

# vim: ts=4 sts=4 sw=4 et ai
